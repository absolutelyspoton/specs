components:
  ECommerceSystem:
    version: "3.1.0"
    description: "E-commerce system converted from legacy JSON format demonstrating steps and advanced features"
    
    import:
      - file: ../common/common-definitions.yaml
        select: [UUID, DateTime]
    
    export:
      models: [Product, Order]
      controllers: [OrderController, ProductController] 
      events: [OrderPlaced, OrderStatusChanged, LowInventoryDetected]
      views: [ProductCatalogView]
    
    models:
      Product:
        description: "Represents a product available for purchase"
        attributes:
          id: UUID required unique
          name: String required
          description: String
          price: Money required
          inventory: Integer required
          inventoryThreshold: Integer default=5
          category: String required values=["Electronics", "Clothing", "Books"]
        behaviors:
          decreaseInventory:
            description: "Reduces the inventory by the specified quantity"
            parameters:
              quantity: Integer required
            returns: Boolean
            requires: ["quantity > 0", "inventory >= quantity"]
            ensures: ["inventory reduced by quantity"]
            steps:
              - "Verify sufficient inventory exists"
              - "Subtract quantity from inventory"
              - "Save the updated inventory"
              - "Check if inventory below threshold"
            publishes: [LowInventoryDetected]
      
      Order:
        description: "Represents a customer order"
        attributes:
          id: UUID required unique
          customerId: UUID required
          date: DateTime required
          total: Money required
          status: String required default=pending values=["pending", "paid", "shipped", "delivered", "canceled"]
        behaviors:
          updateStatus:
            description: "Updates the order status"
            parameters:
              newStatus: String required
            returns: Order
            requires: ["newStatus is valid"]
            ensures: ["status updated", "event published"]
            steps:
              - "Store the current status as oldStatus"
              - "Validate new status transition"
              - "Update status to newStatus"
              - "Save order record"
            publishes: [OrderStatusChanged]
    
    controllers:
      OrderController:
        description: "Handles order-related operations"
        model: Order
        routes:
          "/orders/new": placeOrder
          "/orders/{id}": getOrderDetails
        actions:
          placeOrder:
            description: "Creates a new order for a customer"
            parameters:
              customerId: UUID required
              products: String required
            returns: Order
            requires: 
              - "Customer exists and is active"
              - "All products exist and have sufficient inventory"
            ensures:
              - "New order is created with pending status"
              - "Product inventory is updated"
              - "Order confirmation is sent to customer"
            steps:
              - "Validate customer exists and is active"
              - "Create new order with pending status"
              - "For each product in order: Verify product exists and has sufficient inventory"
              - "For each product in order: Add order item with current product price"
              - "For each product in order: Update product inventory"
              - "Calculate order total"
              - "Save order record"
              - "Return order confirmation"
            publishes: [OrderPlaced]
      
      ProductController:
        description: "Handles product-related operations"
        model: Product
        routes:
          "/products/filter": filterByCategory
          "/products/search": searchProducts
        actions:
          filterByCategory:
            description: "Filters products by category"
            parameters:
              category: String required
            returns: String
            requires: ["Category is a valid product category"]
            ensures: ["Returns filtered list of products"]
            steps:
              - "Get all products from repository"
              - "Filter products by category if category is specified"
              - "Return filtered products"
          
          searchProducts:
            description: "Searches products by name or description"
            parameters:
              searchTerm: String required
            returns: String
            requires: ["Search term is provided"]
            ensures: ["Returns matching products"]
            steps:
              - "Get all products from repository"
              - "Filter products containing search term in name or description"
              - "Return matching products"
    
    events:
      OrderPlaced:
        description: "Triggered when a new order is successfully placed"
        attributes:
          orderId: UUID required
          customerId: UUID required
          orderTotal: Money required
          orderItems: String required
      
      OrderStatusChanged:
        description: "Triggered when an order's status changes"
        attributes:
          orderId: UUID required
          oldStatus: String required
          newStatus: String required
      
      LowInventoryDetected:
        description: "Triggered when product inventory falls below threshold"
        attributes:
          productId: UUID required
          currentInventory: Integer required
          threshold: Integer required
    
    views:
      ProductCatalogView:
        description: "Browse available products"
        type: page
        route: "/products"
        model: Product
        components:
          searchBar:
            type: SearchInput
            properties:
              placeholder: "Search products..."
            events:
              onSearch: ProductController.searchProducts
          
          categoryFilter:
            type: DropdownMenu
            properties:
              placeholder: "Filter by category"
              options:
                - label: "All Categories"
                  value: ""
                - label: "Electronics" 
                  value: "Electronics"
                - label: "Clothing"
                  value: "Clothing"
                - label: "Books"
                  value: "Books"
            events:
              onChange: ProductController.filterByCategory
          
          productList:
            type: DataGrid
            properties:
              columns: [name, price, category, inventory]
              sampleData:
                - id: "1"
                  name: "Smartphone"
                  description: "Latest model smartphone with advanced features"
                  price: 599.99
                  inventory: 50
                  inventoryThreshold: 10
                  category: "Electronics"
                - id: "2"
                  name: "Laptop"
                  description: "High-performance laptop for professionals"
                  price: 999.99
                  inventory: 30
                  inventoryThreshold: 5
                  category: "Electronics"
            events:
              onRowClick: showProductDetails
        
        layout:
          searchBar: "top left"
          categoryFilter: "top right"
          productList: "filling remaining space below"
        
        subscribes:
          LowInventoryDetected: refreshProductDisplay

deployments: {}

# This example demonstrates conversion from legacy JSON format to SpecVerse v3.1
# Key new features showcased:
# - Steps in behaviors and actions for detailed workflow definition
# - Enhanced view components with properties and events
# - Controller routes mapping URLs to actions
# - Advanced layout specifications for views
# - Component property definitions with sample data