
components:
  InventoryManagementSystem:
    version: "3.1.0"
    description: "A system for managing product catalog and inventory with real-time updates"
    
    import:
      - file: ../common/common-definitions.yaml
        select: [UUID, DateTime]
    
    export:
      models: [Product, Transaction]
      controllers: [ProductController, TransactionController]
      events: [ProductAdded, ProductDeleted, ProductPurchased, ProductSold, LowInventoryDetected, OutOfStockDetected]
      views: [ProductCatalogView, ProductDetailView, NewProductView]
    
    models:
      Product:
        description: "Represents a product in the inventory system"
        attributes:
          id: UUID required unique
          name: String required length(1..200)
          description: String optional
          price: Money required range(0.01..*)
          inventory: Integer required range(0..*)
          inventoryThreshold: Integer required default=5
          category: String required values=["Electronics", "Clothing", "Books", "Food", "Other"]
        behaviors:
          increaseInventory:
            description: "Increases the inventory by the specified quantity"
            parameters:
              quantity: Integer required
            returns: Product
            steps:
              - "Add quantity to inventory"
              - "Save the updated inventory"
            publishes: [ProductPurchased]
          
          decreaseInventory:
            description: "Reduces the inventory by the specified quantity"
            parameters:
              quantity: Integer required
            returns: Product
            requires: ["quantity > 0", "inventory >= quantity"]
            steps:
              - "Verify sufficient inventory exists"
              - "Subtract quantity from inventory"
              - "Save the updated inventory"
            publishes: [ProductSold, LowInventoryDetected, OutOfStockDetected]
      
      Transaction:
        description: "Represents a purchase or sale transaction"
        attributes:
          id: UUID required unique
          productId: UUID required
          transactionType: String required values=["purchase", "sale"]
          quantity: Integer required range(1..*)
          unitPrice: Money required range(0.01..*)
          totalAmount: Money required range(0.01..*)
          timestamp: DateTime required
    
    controllers:
      ProductController:
        description: "Handles product-related operations"
        model: Product
        routes:
          "/products": getProductCatalog
          "/products/add": addProduct
          "/products/delete/{id}": deleteProduct
          "/products/purchase": purchaseInventory
          "/products/sell": sellProduct
          "/products/filter": filterByCategory
          "/products/search": searchProducts
          "/products/{id}": getProductDetails
        actions:
          addProduct:
            description: "Adds a new product to the catalog"
            parameters:
              productData: Product required
            returns: Product
            requires: 
              - "Product name is provided"
              - "Product price is valid"
              - "Initial inventory quantity is valid"
            ensures: ["New product is created and added to catalog"]
            steps:
              - "Validate product data"
              - "Generate unique product ID"
              - "Create new product record"
              - "Return the created product"
            publishes: [ProductAdded]
          
          deleteProduct:
            description: "Removes a product from the catalog"
            parameters:
              productId: UUID required
            returns: Boolean
            requires: 
              - "Product exists in the catalog"
              - "Product ID is provided"
            ensures: ["Product is removed from the catalog"]
            steps:
              - "Verify product exists"
              - "Delete product record"
              - "Return success confirmation"
            publishes: [ProductDeleted]
          
          purchaseInventory:
            description: "Adds inventory to a product (restocking)"
            parameters:
              productId: UUID required
              quantity: Integer required
            returns: Product
            requires:
              - "Product exists in the catalog"
              - "Product ID is provided"
              - "Purchase quantity is greater than zero"
            ensures:
              - "Product inventory is increased"
              - "Purchase transaction is recorded"
            steps:
              - "Verify product exists"
              - "Create purchase transaction record"
              - "Increase product inventory"
              - "Return updated product"
          
          sellProduct:
            description: "Reduces inventory of a product (sales)"
            parameters:
              productId: UUID required
              quantity: Integer required
            returns: Product
            requires:
              - "Product exists in the catalog"
              - "Product ID is provided"
              - "Sell quantity is greater than zero"
              - "Sufficient inventory is available"
            ensures:
              - "Product inventory is decreased"
              - "Sale transaction is recorded"
            steps:
              - "Verify product exists"
              - "Verify sufficient inventory"
              - "Create sale transaction record"
              - "Decrease product inventory"
              - "Return updated product"
          
          getProductCatalog:
            description: "Returns all products in the catalog"
            returns: String
            ensures: ["List of all products is returned"]
            steps:
              - "Get all products from the repository"
              - "Return product list"
          
          getProductDetails:
            description: "Returns details for a specific product"
            parameters:
              productId: UUID required
            returns: Product
            requires:
              - "Product ID is provided"
              - "Product exists in the catalog"
            ensures: ["Product details are returned"]
            steps:
              - "Verify product exists"
              - "Return product details"
          
          filterByCategory:
            description: "Filters products by category"
            parameters:
              category: String required
            returns: String
            requires: ["Category is a valid product category"]
            ensures: ["Returns filtered list of products"]
            steps:
              - "Get all products"
              - "Filter products by category if category is specified"
              - "Return filtered products"
          
          searchProducts:
            description: "Searches products by name or description"
            parameters:
              searchTerm: String required
            returns: String
            requires: ["Search term is provided"]
            ensures: ["Returns matching products"]
            steps:
              - "Get all products"
              - "Filter products by search term"
              - "Return matching products"
      
      TransactionController:
        description: "Handles transaction-related operations"
        model: Transaction
        routes:
          "/transactions/{productId}": getTransactionHistory
        actions:
          getTransactionHistory:
            description: "Returns transaction history for a product"
            parameters:
              productId: UUID required
            returns: String
            requires: ["Product ID is provided"]
            ensures: ["Transaction history is returned"]
            steps:
              - "Get transactions for the specified product"
              - "Return transaction list"
    
    events:
      ProductAdded:
        description: "Triggered when a new product is added to the catalog"
        attributes:
          productId: UUID required
          name: String required
          category: String required
          price: Money required
          initialInventory: Integer required
      
      ProductDeleted:
        description: "Triggered when a product is removed from the catalog"
        attributes:
          productId: UUID required
      
      ProductPurchased:
        description: "Triggered when inventory is added to a product (restock)"
        attributes:
          productId: UUID required
          quantity: Integer required
          newInventoryLevel: Integer required
          timestamp: DateTime required
      
      ProductSold:
        description: "Triggered when inventory is removed from a product (sale)"
        attributes:
          productId: UUID required
          quantity: Integer required
          newInventoryLevel: Integer required
          timestamp: DateTime required
      
      LowInventoryDetected:
        description: "Triggered when product inventory falls below threshold"
        attributes:
          productId: UUID required
          productName: String required
          currentInventory: Integer required
          threshold: Integer required
      
      OutOfStockDetected:
        description: "Triggered when product inventory reaches zero"
        attributes:
          productId: UUID required
          productName: String required
          timestamp: DateTime required
    
    views:
      ProductCatalogView:
        description: "Browse available products with inventory information"
        type: page
        route: "/products"
        model: Product
        components:
          searchBar:
            type: SearchInput
            properties:
              placeholder: "Search products..."
            events:
              onSearch: ProductController.searchProducts
          
          categoryFilter:
            type: DropdownMenu
            properties:
              placeholder: "Filter by category"
              options:
                - label: "All Categories"
                  value: ""
                - label: "Electronics"
                  value: "Electronics"
                - label: "Clothing"
                  value: "Clothing"
                - label: "Books"
                  value: "Books"
                - label: "Food"
                  value: "Food"
                - label: "Other"
                  value: "Other"
            events:
              onChange: ProductController.filterByCategory
          
          inventoryStatusPanel:
            type: Panel
            properties:
              title: "Inventory Status"
              content: "Total Products: {count} | Low Inventory: {lowCount} | Out of Stock: {outCount}"
          
          productList:
            type: DataGrid
            properties:
              columns: [id, name, category, price, inventory]
            events:
              onRowClick: showProductDetails
        
        layout:
          searchBar: "top left"
          categoryFilter: "top right"
          inventoryStatusPanel: "below searchBar and categoryFilter"
          productList: "filling remaining space below inventoryStatusPanel"
        
        subscribes:
          ProductAdded: refreshProductList
          ProductDeleted: refreshProductList
          ProductPurchased: refreshProductList
          ProductSold: refreshProductList
          LowInventoryDetected: highlightLowInventory
          OutOfStockDetected: highlightOutOfStock
      
      ProductDetailView:
        description: "View and manage a specific product"
        type: page
        route: "/products/{id}"
        model: Product
        components:
          productDetailsPanel:
            type: Panel
            properties:
              title: "Product Details"
              content: "<h3>{name}</h3><div>Price: ${price}</div><div>Current Inventory: {inventory}</div><div>Category: {category}</div><div>Description: {description}</div>"
          
          purchasePanel:
            type: Panel
            properties:
              title: "Add Inventory"
          
          purchaseQtyInput:
            type: Input
            properties:
              label: "Purchase Quantity:"
              type: "number"
              min: 1
              value: 1
              required: true
          
          purchaseBtn:
            type: Button
            properties:
              text: "Add Inventory"
              type: "primary"
            events:
              onClick: handlePurchase
          
          sellPanel:
            type: Panel
            properties:
              title: "Sell Product"
          
          sellQtyInput:
            type: Input
            properties:
              label: "Sell Quantity:"
              type: "number"
              min: 1
              value: 1
              required: true
          
          sellBtn:
            type: Button
            properties:
              text: "Sell Product"
              type: "primary"
            events:
              onClick: handleSell
          
          deleteButton:
            type: Button
            properties:
              text: "Delete Product"
              type: "danger"
            events:
              onClick: handleDelete
          
          transactionHistoryGrid:
            type: DataGrid
            properties:
              title: "Transaction History"
              columns: [timestamp, transactionType, quantity, unitPrice, totalAmount]
        
        layout:
          productDetailsPanel: "main area"
          purchasePanel: "below productDetailsPanel"
          purchaseQtyInput: "inside purchasePanel"
          purchaseBtn: "inside purchasePanel"
          sellPanel: "beside purchasePanel"
          sellQtyInput: "inside sellPanel"
          sellBtn: "inside sellPanel"
          deleteButton: "below panels"
          transactionHistoryGrid: "bottom area"
      
      NewProductView:
        description: "Add a new product to the catalog"
        type: page
        route: "/products/new"
        model: Product
        components:
          addProductPanel:
            type: Panel
            properties:
              title: "Add New Product"
          
          productNameInput:
            type: Input
            properties:
              label: "Product Name:"
              required: true
          
          productDescriptionInput:
            type: Input
            properties:
              label: "Description:"
              multiline: true
          
          productPriceInput:
            type: Input
            properties:
              label: "Price:"
              type: "number"
              min: 0.01
              step: 0.01
              value: 0.01
              required: true
          
          productCategorySelect:
            type: DropdownMenu
            properties:
              label: "Category:"
              options:
                - label: "Electronics"
                  value: "Electronics"
                - label: "Clothing"
                  value: "Clothing"
                - label: "Books"
                  value: "Books"
                - label: "Food"
                  value: "Food"
                - label: "Other"
                  value: "Other"
              required: true
          
          productInventoryInput:
            type: Input
            properties:
              label: "Initial Inventory:"
              type: "number"
              min: 0
              value: 0
              required: true
          
          productThresholdInput:
            type: Input
            properties:
              label: "Low Inventory Threshold:"
              type: "number"
              min: 1
              value: 5
              required: true
          
          addProductBtn:
            type: Button
            properties:
              text: "Add Product"
              type: "primary"
            events:
              onClick: handleAddProduct
        
        layout:
          addProductPanel: "main form area"
          productNameInput: "inside addProductPanel"
          productDescriptionInput: "inside addProductPanel"
          productPriceInput: "inside addProductPanel"
          productCategorySelect: "inside addProductPanel"
          productInventoryInput: "inside addProductPanel"
          productThresholdInput: "inside addProductPanel"
          addProductBtn: "inside addProductPanel"

deployments: {}

# This example demonstrates conversion from legacy JSON format to SpecVerse v3.1
# Key features showcased:
# - Complete inventory management system with transaction tracking
# - Enhanced view components with detailed properties and events
# - Complex controller actions with multiple operations
# - Event-driven architecture for real-time inventory updates
# - Rich UI components including panels, inputs, buttons, and data grids
