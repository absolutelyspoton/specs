
components:
  GuestHouseBookingSystem:
    version: "3.1.0"
    description: "A multi-property guest house booking management system with visual timeline interface"
    
    import:
      - file: ../common/common-definitions.yaml
        select: [UUID, DateTime, Date]
    
    export:
      models: [House, Room, Booking, User]
      controllers: [BookingController, AuthController]
      services: [TimelineService, ValidationService]
      events: [HouseCreated, RoomAdded, BookingCreated, BookingUpdated, BookingDeleted, UserAuthenticated]
      views: [BookingManagerView, BookingDialog]
    
    models:
      House:
        description: "Represents a guest house property"
        attributes:
          id: UUID required unique
          name: String required length(1..255)
          address: String optional
          createdAt: DateTime required
        relationships:
          rooms: hasMany Room
        behaviors:
          addRoom:
            description: "Adds a new room to the house"
            parameters:
              roomData: Room required
            returns: Room
            steps:
              - "Validate room name is unique within house"
              - "Create new room record"
              - "Associate room with house"
            publishes: [RoomAdded]
      
      Room:
        description: "Represents a room within a guest house"
        attributes:
          id: UUID required unique
          houseId: UUID required
          name: String required length(1..255)
          createdAt: DateTime required
        relationships:
          house: belongsTo House
          bookings: hasMany Booking
        behaviors:
          checkAvailability:
            description: "Checks if room is available for given dates"
            parameters:
              checkIn: Date required
              checkOut: Date required
            returns: Boolean
            steps:
              - "Query existing bookings for date range"
              - "Check for conflicts"
              - "Return availability status"
      
      Booking:
        description: "Represents a room booking"
        attributes:
          id: UUID required unique
          roomId: UUID required
          guestName: String required length(1..255)
          checkIn: Date required
          checkOut: Date required
          notes: String optional
          createdAt: DateTime required
        relationships:
          room: belongsTo Room
        behaviors:
          validateDates:
            description: "Validates booking dates"
            returns: Boolean
            steps:
              - "Ensure check-out is after check-in"
              - "Check for date conflicts"
              - "Return validation result"
      
      User:
        description: "Represents an authenticated system user"
        attributes:
          id: UUID required unique
          email: String required
          isAllowed: Boolean required
          lastLogin: DateTime optional
        behaviors:
          validateAccess:
            description: "Validates if user has access to the system"
            returns: Boolean
            steps:
              - "Check if email is in allowlist"
              - "Return access status"
    
    controllers:
      BookingController:
        description: "Manages booking operations"
        model: Booking
        routes:
          "/bookings/new": createBooking
          "/bookings/{id}": editBooking
          "/bookings/{id}/delete": deleteBooking
        actions:
          createBooking:
            description: "Creates a new booking"
            parameters:
              bookingData: Booking required
            returns: Booking
            requires:
              - "Room is available for selected dates"
              - "Guest name is provided"
              - "Check-out date is after check-in date"
            steps:
              - "Validate booking dates"
              - "Create new booking record"
              - "Update room availability"
            publishes: [BookingCreated]
          
          editBooking:
            description: "Modifies an existing booking"
            parameters:
              bookingId: UUID required
              bookingData: Booking required
            returns: Booking
            requires:
              - "Booking exists"
              - "New dates are available"
            steps:
              - "Validate new booking dates"
              - "Update booking record"
              - "Update room availability"
            publishes: [BookingUpdated]
          
          deleteBooking:
            description: "Removes a booking"
            parameters:
              bookingId: UUID required
            returns: Boolean
            requires: ["Booking exists"]
            steps:
              - "Delete booking record"
              - "Update room availability"
            publishes: [BookingDeleted]
          
          selectHouse:
            description: "Selects a house for viewing bookings"
            parameters:
              houseId: UUID required
            returns: String
            steps:
              - "Load house details"
              - "Load rooms for house"
              - "Return house booking view"
        
        subscribes:
          RoomAdded: updateHouseRooms
          HouseCreated: updateHouseList
      
      AuthController:
        description: "Handles user authentication"
        model: User
        routes:
          "/api/auth/signin": authenticate
          "/api/auth/signout": signout
        actions:
          authenticate:
            description: "Authenticates a user"
            parameters:
              credentials: String required
            returns: User
            requires: ["User email is in allowlist"]
            steps:
              - "Validate Google OAuth credentials"
              - "Check email against allowlist"
              - "Create or update user session"
            publishes: [UserAuthenticated]
          
          signout:
            description: "Signs out a user"
            returns: Boolean
            steps:
              - "Clear user session"
              - "Return success status"
        
        subscribes:
          UserAuthenticated: updateUserSession
    
    services:
      TimelineService:
        description: "Provides timeline visualization capabilities"
        operations:
          generateTimeline:
            description: "Generates timeline view for selected date range"
            parameters:
              startDate: Date required
              endDate: Date required
              houseId: UUID required
            returns: String
            steps:
              - "Load bookings for date range"
              - "Calculate room availability"
              - "Generate timeline visualization"
          
          highlightWeekends:
            description: "Highlights weekend dates in timeline"
            parameters:
              startDate: Date required
              endDate: Date required
            returns: String
            steps:
              - "Identify weekend dates in range"
              - "Apply weekend styling"
        
        subscribes:
          BookingCreated: refreshTimeline
          BookingUpdated: refreshTimeline
          BookingDeleted: refreshTimeline
      
      ValidationService:
        description: "Provides validation for bookings and dates"
        operations:
          validateBookingDates:
            description: "Validates booking date ranges"
            parameters:
              checkIn: Date required
              checkOut: Date required
            returns: Boolean
            steps:
              - "Check check-in is before check-out"
              - "Verify dates are in the future"
              - "Check for booking conflicts"
          
          validateRoomAvailability:
            description: "Checks room availability for dates"
            parameters:
              roomId: UUID required
              checkIn: Date required
              checkOut: Date required
            returns: Boolean
            steps:
              - "Query existing bookings"
              - "Check for conflicts"
              - "Return availability status"
        
        subscribes:
          BookingCreated: validateNewBooking
          BookingUpdated: validateUpdatedBooking
    
    events:
      HouseCreated:
        description: "Triggered when a new guest house is created"
        attributes:
          houseId: UUID required
          name: String required
          address: String optional
          createdAt: DateTime required
      
      RoomAdded:
        description: "Triggered when a new room is added to a house"
        attributes:
          roomId: UUID required
          houseId: UUID required
          name: String required
          createdAt: DateTime required
      
      BookingCreated:
        description: "Triggered when a new booking is created"
        attributes:
          bookingId: UUID required
          roomId: UUID required
          guestName: String required
          checkIn: Date required
          checkOut: Date required
          notes: String optional
          createdAt: DateTime required
      
      BookingUpdated:
        description: "Triggered when an existing booking is modified"
        attributes:
          bookingId: UUID required
          roomId: UUID required
          guestName: String required
          checkIn: Date required
          checkOut: Date required
          notes: String optional
          updatedAt: DateTime required
      
      BookingDeleted:
        description: "Triggered when a booking is deleted"
        attributes:
          bookingId: UUID required
          roomId: UUID required
          deletedAt: DateTime required
      
      UserAuthenticated:
        description: "Triggered when a user successfully authenticates"
        attributes:
          userId: UUID required
          email: String required
          authenticatedAt: DateTime required
    
    views:
      BookingManagerView:
        description: "Main interface for managing bookings"
        type: page
        route: "/bookings"
        model: Booking
        components:
          houseSelector:
            type: Dropdown
            properties:
              label: "Select House"
              placeholder: "Choose a house"
            events:
              onChange: BookingController.selectHouse
          
          timelineView:
            type: Timeline
            properties:
              viewOptions: ["Week", "2 Weeks", "Month", "3 Months", "6 Months"]
              highlightWeekends: true
            events:
              onDateSelect: BookingController.createBooking
              onBookingClick: BookingController.editBooking
          
          bookingList:
            type: Table
            properties:
              columns: ["Guest", "Room", "Check-in", "Check-out", "Notes"]
            events:
              onRowClick: BookingController.showBookingDetails
        
        layout:
          houseSelector: "top"
          timelineView: "below houseSelector filling space"
          bookingList: "bottom collapsible"
        
        subscribes:
          BookingCreated: refreshTimeline
          BookingUpdated: refreshTimeline
          BookingDeleted: refreshTimeline
      
      BookingDialog:
        description: "Dialog for creating and editing bookings"
        type: modal
        model: Booking
        components:
          guestInput:
            type: TextInput
            properties:
              label: "Guest Name"
              required: true
          
          dateRange:
            type: DateRangePicker
            properties:
              label: "Booking Dates"
              required: true
          
          notesInput:
            type: TextArea
            properties:
              label: "Notes"
              optional: true
        
        layout:
          guestInput: "top"
          dateRange: "below guestInput"
          notesInput: "below dateRange"
        
        subscribes:
          BookingCreated: closeDialog
          BookingUpdated: closeDialog

deployments: {}

# This example demonstrates conversion from legacy JSON format to SpecVerse v3.1
# Key features showcased:
# - Multi-entity relationship modeling (House -> Room -> Booking)
# - Advanced timeline visualization components
# - Date range validation and availability checking
# - Authentication and user access management
# - Modal dialog components for booking management
# - Service-oriented architecture for complex business logic
